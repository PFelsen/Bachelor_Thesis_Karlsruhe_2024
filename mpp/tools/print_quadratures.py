import numpy
from sympy.utilities.iterables import multiset_permutations
import quadpy


class qPoint:
    x, y, z, w = 0, 0, 0, 0

    def __init__(self, a, b, c, d):
        self.x, self.y, self.z, self.w = a, b, c, d


def unique_perms(weight, alpha, beta, gamma, delta):
    qPoints = []
    for qIter in multiset_permutations([alpha, beta, gamma, delta], 3):
        qPoints.append(qPoint(*qIter, weight))
    return qPoints


def perm_1(weight, alpha):
    return unique_perms(weight, alpha, alpha, alpha, alpha)


def perm_4(weight, alpha):
    return unique_perms(weight, alpha, alpha, alpha, 1.0 - 3.0 * alpha)


def perm_6(weight, alpha):
    return unique_perms(weight, alpha, alpha, 0.5 - alpha, 0.5 - alpha)


def perm_12(weight, alpha, beta):
    return unique_perms(weight, alpha, alpha, beta, 1.0 - 2 * alpha - beta)
    #
    # return [qPoint(beta, alpha, alpha, weight),
    #         qPoint(alpha, beta, alpha, weight),
    #         qPoint(alpha, alpha, beta, weight),
    #         qPoint(1-2*alpha-beta, alpha, alpha, weight),
    #         qPoint(alpha, 1-2*alpha-beta, alpha, weight),
    #         qPoint(alpha, alpha, 1-2*alpha-beta, weight),
    #         qPoint(beta, 1-2*alpha-beta, alpha, weight),
    #         qPoint(alpha, beta, 1-2*alpha-beta, weight),
    #         qPoint(1-2*alpha-beta, alpha, beta, weight),
    #         qPoint(1-2*alpha-beta, beta, alpha, weight),
    #         qPoint(alpha, 1-2*alpha-beta, beta, weight),
    #         qPoint(beta, alpha, 1-2*alpha-beta, weight)
    #         ]


def perm_24(weight, alpha, beta, gamma):
    return unique_perms(weight, alpha, beta, gamma, 1.0 - alpha - beta - gamma)


def write_quad_file(maxDegree):
    with open("tetrahedron_quad.txt", 'w') as output_file:
        for n in range(maxDegree):
            scheme = quadpy.t3.get_good_scheme(n + 1)
            x, y, z, w = scheme.points[0], scheme.points[1], scheme.points[2], scheme.points[3]

            w /= (6.0 * sum(w))
            m = len(w)
            output_file.write("case " + str(n + 1) + ": resize(" + str(m) + ");\n")

            for i in range(m):
                output_file.write("w[" + str(i) + "] = " + str(w[i]) + ";\n")
                output_file.write("z[" + str(i) + "] = Point("
                                  + str(x[i]) + ", "
                                  + str(y[i]) + ", "
                                  + str(z[i]) + ");\n")

            output_file.write("break;\n")


quad_points = [
    [
        [1, 1.0 / 6.0, 0.25]
    ],
    [
        [4, 1.0 / 24.0, 0.138196601125010]
    ],
    [
        [1, -0.1333333333333333, 0.25],
        [4, 0.075, 1.0 / 6.0]
    ],
    [
        [1, -0.0131555555555555550, 0.25],
        [4, 0.0076222222222222222, 0.0714285714285714285],
        [6, 0.0248888888888888880, 0.399403576166799219]
    ],
    [
        [4, 0.11268792571801585079918565233328633 / 6.0, 0.31088591926330060979734573376345783],
        [4, 0.07349304311636194954371020548632750 / 6.0, 0.09273525031089122640232391373703061],
        [6, 0.04254602077708146643806942812025744 / 6.0, 0.04550370412564964949188052627933943]
    ],
    [
        [4, 0.03992275025816749209969062755747998 / 6.0, 0.21460287125915202928883921938628499],
        [4, 0.01007721105532064294801323744593686 / 6.0, 0.04067395853461135311557944895641006],
        [4, 0.05535718154365472209515327785372602 / 6.0, 0.32233789014227551034399447076249213],
        [12, 27.0 / 560.0 / 6.0, 0.06366100187501752529923552760572698, 0.60300566479164914136743113906093969]
    ],
    [
        [1, 0.09548528946413084886057843611722638 / 6.0, 0.25],
        [4, 0.04232958120996702907628617079854674 / 6.0, 0.31570114977820279942342999959331149],
        [6, 0.03189692783285757993427482408294246 / 6.0, 0.05048982259839636876305382298656247],
        [12, 0.03720713072833462136961556119148112 / 6.0, 0.18883383102600104773643110385458576,
         0.57517163758700002348324157702230752],
        [12, 0.00811077082990334156610343349109654 / 6.0, 0.02126547254148324598883610149981994,
         0.81083024109854856111810537984823239]
    ],
    [
        [4, 0.00639714777990232132145142033517302 / 6.0, 0.03967542307038990126507132953938949],
        [4, 0.04019044802096617248816115847981783 / 6.0, 0.31448780069809631378416056269714830],
        [4, 0.02430797550477032117486910877192260 / 6.0, 0.10198669306270330000000000000000000],
        [4, 0.05485889241369744046692412399039144 / 6.0, 0.18420369694919151227594641734890918],
        [6, 0.03571961223409918246495096899661762 / 6.0, 0.06343628775453989240514123870189827],
        [12, 0.00718319069785253940945110521980376 / 6.0, 0.02169016206772800480266248262493018,
         0.71993192203946593588943495335273478],
        [12, 0.01637218194531911754093813975611913 / 6.0, 0.20448008063679571424133557487274534,
         0.58057719012880922417539817139062041]
    ],
    [
        [1, 0.05489853459364812686895885032391298 / 6.0, 0.25000000000000000000000000000000000],
        [4, 0.00421825735654367356185795185819147 / 6.0, 0.03785502061999503609086515586175707],
        [4, 0.02348412311384798927791501022996111 / 6.0, 0.16954439965012220000000000000000000],
        [4, 0.00421283454980389148648831814037819 / 6.0, 0.05484140424416689000000000000000000],
        [4, 0.02994712640542812769203037546126163 / 6.0, 0.32229717190921058836777748445908171],
        [6, 0.03695441750679136335292416138761121 / 6.0, 0.10961777508972033704050355954365052],
        [12, 0.00817349224171051348425319650294732 / 6.0, 0.45915766038590539763886410168178216,
         0.08004485927247373376034330857923567],
        [12, 0.00987978656102278957913113314297149 / 6.0, 0.03296694775357210169727386483414899,
         0.71879584022434055051132299796383374],
        [12, 0.02160718741919244401497646690335203 / 6.0, 0.18174359672117481549870278661377760,
         0.60023700739524674102301240348069459]
    ],
    [
        [1, 0.04574189830483037077884770618329337 / 6.0, 0.25000000000000000000000000000000000],
        [4, 0.01092727610912416907498417206565671 / 6.0, 0.11425191803006935688146412277598412],
        [4, 0.00055352334192264689534558564012282 / 6.0, 0.01063790234539248531264164411274776],
        [4, 0.02569337913913269580782688316792080 / 6.0, 0.31274070833535645859816704980806110],
        [6, 0.00055387649657283109312967562590035 / 6.0, 0.01631296303281644000000000000000000],
        [12, 0.01044842402938294329072628200105773 / 6.0, 0.03430622963180452385835196582344460,
         0.59830121060139461905983787517050400],
        [12, 0.02513844602651287118280517785487423 / 6.0, 0.12346418534551115945916818783743644,
         0.47120066204746310257913700590727081],
        [12, 0.01178620679249594711782155323755017 / 6.0, 0.40991962933181117418479812480531207,
         0.16546413290740130923509687990363569],
        [12, 0.01332022473886650471019828463616468 / 6.0, 0.17397243903011716743177479785668929,
         0.62916375300275643773181882027844514],
        [12, 0.00615987577565961666092767531756180 / 6.0, 0.03002157005631784150255786784038011,
         0.81213056814351208262160080755918730]
    ],
    [
        [4, 0.01612698613577620369120244222737879 / 6.0, 0.12460560449278830000000000000000000],
        [4, 0.00178872341812357138976990346996962 / 6.0, 0.02609630765687464746851542316261877],
        [4, 0.00847529348343123401863799968389086 / 6.0, 0.07193883255798884087330011042809557],
        [4, 0.01238021263944669050859562763135516 / 6.0, 0.32611122454203676937273102302894204],
        [4, 0.02205586697199415746140963638568037 / 6.0, 0.29405882789858127213310307732130217],
        [4, 0.02295765467664274421265594265203307 / 6.0, 0.19271399104965490000000000000000000],
        [6, 0.00120553827014535727045055662252294 / 6.0, 0.00047127204692773946587837159205225],
        [6, 0.02479381575164443454447803302296997 / 6.0, 0.10321360207480949336085123341390539],
        [12, 0.01203878836480353606935457416590660 / 6.0, 0.04349989920159741251267172033621503,
         0.63045319723555591476353398203997141],
        [12, 0.00189370204498242146248858917618493 / 6.0, 0.01414839289422299290755441603794058,
         0.82491678632147090000000000000000000],
        [12, 0.01838752922255814184581020943433469 / 6.0, 0.21646077368258425486341884576246642,
         0.52711130286496480000000000000000000],
        [12, 0.00375249249801662461193260176157591 / 6.0, 0.13301884366834711587538262083530116,
         0.73318551371398651551736762818473584],
        [12, 0.00633289841693951300885921328914879 / 6.0, 0.44054756810613723082959230959880706,
         0.11506799584377921703650823955291194]
    ],
    [
        [1, 0.02340581914868067999082580773836836 / 6.0, 0.25000000000000000000000000000000000],
        [4, 0.00484469946470415656870798306091558 / 6.0, 0.19318721110347230000000000000000000],
        [4, 0.00079865303812732982185563521014343 / 6.0, 0.01811701371436566878506928822499717],
        [4, 0.01311872008808756207964488505025527 / 6.0, 0.10700751831426066518406159227423033],
        [4, 0.02352182961292765917274505054313770 / 6.0, 0.29936173715970702940603127680004538],
        [4, 0.00210860882494149803857437048649497 / 6.0, 0.33333033333333333042835213613025030],
        [4, 0.00047839298963616600187228601742259 / 6.0, 0.16575369007421640000000000000000000],
        [6, 0.00204546234216855322941711800170502 / 6.0, 0.04009986052352575650366980228640728],
        [12, 0.00334576331671817115245418532677178 / 6.0, 0.01951844463761131301132122485607343,
         0.59982639757597731668263005976738196],
        [12, 0.01181044822479275264785338274950585 / 6.0, 0.24970741896308715787490891769354198,
         0.47400425629911050000000000000000000],
        [12, 0.00290156990282342152841364375092118 / 6.0, 0.07674205857869954726322831328843659,
         0.83056291375422969598432041821082569],
        [12, 0.00949250645501753676094846901252898 / 6.0, 0.43011409627915217536723647418133112,
         0.02265922072588833582931396831630072],
        [12, 0.02094018358085748583183796760479700 / 6.0, 0.12197854304894211937147375564906792,
         0.47765370899783134571567376444973682],
        [12, 0.00171435866337409051521874943702732 / 6.0, 0.01480482319031682427540691439704854,
         0.81083799468092699988474915243749073],
        [24, 0.00759915954173370886076474450830409 / 6.0, 0.65250697573013212016385330106711095,
         0.22646235632397177636617160407210034, 0.02251830769546778956654013747639605]
    ],
    [
        [1, .02191579945212728678229670892998658 / 6.0, .25000000000000000000000000000000000],
        [4, 0.00809592740005652573580359966615063 / 6.0, .09935339765028269917868020572165369],
        [4, .00130319185047278813746994806952476 / 6.0, .02361873260499568532036302265004401],
        [4, .01996610676014222116016391561580003 / 6.0, .30089166537572662790706731844610997],
        [4, .02125705756007566772097136088386650 / 6.0, .18156624280757148139366685840064601],
        [6, .00077331890737182713690269661719116 / 6.0, .00428160639152879988718710754508354],
        [6, .01755491389570430512641028370006205 / 6.0, .12290357421888442998582785890620434],
        [12, .00213830361001659899343287397434178 / 6.0, .28318219770202728236417353077594322,         .43037955664247500440987356786807501],
        [12, .00256560169283338620814651902766716 / 6.0, .02239485904524970717572425710098278,         .83488749018470024820940398932904512],
        [12, .00338953948455728203040932651810398 / 6.0, .02191788402113435132324662419880111,         .67691762094326571059673391273529166],
        [12, .01135828330503278417235563981454793 / 6.0, .21481417044274656673534260788169227,         .52280311286258745560867693994038579],
        [12, .01103203882197761043040360052454856 / 6.0, .08000490008644308882018405418010744,         .24689045570275147370034631014113188],
        [12, .00457602573785952356043458354199517 / 6.0, .11579466150271899371721034492503850,         .74997281767443310000000000000000000],
        [12, .00827343104220868129752243222682095 / 6.0, .39129315347000474438672195978809687,         .18835457382799180000000000000000000],
        [12, .00586641165391940007076312979369247 / 6.0, .45315745821242834581317282468854978,         .02202033169457796534173826092007299],
        [24, .00313458521939849614410720196518793 / 6.0, .27324999892429634023602493512400674,         .60775441245653315696274741541102470, .00561877924700169073874366184065955]
    ],
    [
        [4, .00898427322254918127543126682598773 / 6.0, .12703434587701869604797950660749487],
        [4, .00235414897468188299910869230818368 / 6.0, .03716308713428675181759859706979325],
        [4, .00733553866836377016223467789336265 / 6.0, .30931161817607732544635505822019770],
        [4, .00360629336228634011530354432318077 / 6.0, .07778813507287403019691221965639750],
        [4, .00022796656022189240650071390651338 / 6.0, .01187611663683786502091234677477106],
        [6, .00425068731230945391542573203967906 / 6.0, .02371189715571358237825633505545476],
        [12, .00502229674184657212637707578731437 / 6.0, .04551422172971295738029708158398140,
         .73884882267833978290969755547076243],
        [12, .00664105199619194276141547967835717 / 6.0, .19457055431059420000000000000000000,
         .36138202354403612356128050094846106],
        [12, .00648663075652078221084713724389357 / 6.0, .42158193164647035846631052119479790,
         .13481021809330111977392354242291205],
        [12, .01084924609520658118048627917429636 / 6.0, .36227661803202431683389679069549247,
         .09100846759454444774082592541447308],
        [12, .00698225572400728567899793615355807 / 6.0, .26662003783461096351186917353420086,
         .45135951603290056428206454329600320],
        [12, .01057643198113441258335538488635301 / 6.0, .07870367664603755989163074150395650,
         .53854007868617855365162509332690316],
        [12, .00172517387494940531214061228255136 / 6.0, .01462604843949452202375023818416595,
         .68140642280720592407050422036244765],
        [12, .01064026039260234415487304925754523 / 6.0, .20755902173331721318141636044536441,
         .49641284136813420000000000000000000],
        [12, .00031627239419231128593612508289817 / 6.0, .00317672566580133046838579859910808,
         .88571644680187933415518991697343211],
        [12, .00676212093730203740266276007684025 / 6.0, .16634658949265576428233847556684871,
         .64221464654291632524678940601354742],
        [24, .00293371746826111669254642316791922 / 6.0, .59698804897542365623933181080626979,
         .30344194369885264264500117734906354, .00772105989990930297678960227638472],
        [24, .00091803679200083798695474146748587 / 6.0, .81379652801439184798325669233364806,
         .06021328978843793059084645285790579, .12582571438467239382589793638340901]
    ],
    [
        [4, .01511655113441068628579262410695901 / 6.0, .28124082071166706712228812256180659],
        [4, .00001738706704490033047765207649289 / 6.0, .00000100000000000000000000000000000],
        [4, .00408585202038717648728016969643145 / 6.0, .33056317367432518802610420354554872],
        [6, .00592951036834067574154481489521970 / 6.0, .05655437237844684197147304064357931],
        [6, .01420051324006323918208630429532935 / 6.0, .13406515374085695587554535149192519],
        [6, .00136583559622061392953778218648684 / 6.0, .01239081855247817851688132222166487],
        [12, .00597843624352069400428887732014643 / 6.0, .14221122178861693892726683983688389,
         .64809821878560890000000000000000000],
        [12, .00213385927130234729441847373974791 / 6.0, .02090030455681822945106611831783482,
         .65116321211987558801152908926761095],
        [12, .00085751208108799141852494440382306 / 6.0, .10144207052995866487339983352935483,
         .79447457077349830086964982075533754],
        [12, .00655418423314395143320591423869070 / 6.0, .08775565461483070674887889035957709,
         .53891506037733579601146950816566679],
        [12, .00145239359342879306554178830466918 / 6.0, .01998436504573363744360581546507844,
         .84228234042896665795195102873353839],
        [12, .00147765208012100448758842442963730 / 6.0, .06649943952962487000000000000000000,
         .80627017415793485464777412253196755],
        [12, .01081554170660306739887132139435944 / 6.0, .25438425646033346908988464012136442,
         .42513796317252088424321606777763436],
        [12, .00024706437793471016224470871566645 / 6.0, .00234540856303606208380148727978905,
         .77743944851625139876389227055364820],
        [12, .00234657677419497479387086599232896 / 6.0, .21804126228722166267028321193653146,
         .56369987819744481913063704381874069],
        [12, .00558455102470039972935684386805533 / 6.0, .17628473381389930000000000000000000,
         .47113514937830371190183410485213220],
        [12, .00047614970218433417418631138964354 / 6.0, .03692599014419112524447544153674980,
         .92319344206103834904944651746567873],
        [12, .00652552745936288648367228758797825 / 6.0, .39915131927633474627502159614222501,
         .18025052210917373840254964287864445],
        [24, .00355529314103980065711359565274541 / 6.0, .70992232018321836731926292111215212,
         .07781901333037738366765196393633786,
         .01956139662389449507339296707905076],
        [24, .00254671621466224217846844420241250 / 6.0, .55032805389206083155759265306174001,
         .08164397664371474524823001052216509,
         .00913454545923239001997189364340146],
        [24, .00476266986570878721098194646156262 / 6.0, .55025255453513500000000000000000000,
         .14593285191012480000000000000000000,
         .04144548457433058363391383686956707]
    ]
]


def write_symmetric_file():
    with open("../../tools/tetrahedron_symquad.txt", 'w') as output_file:
        for n in range(len(quad_points)):
            i = 0
            output_file.write(
                "case " + str(n + 1) + ": resize(" + str(sum(rule[0] for rule in quad_points[n])) + ");\n")

            sumW = 0.0
            for rule in quad_points[n]:
                sumW += rule[0] * rule[1]

            for rule in quad_points[n]:
                qRule = []
                if rule[0] is 1:
                    qRule = perm_1(rule[1] / (sumW * 6.0), *rule[2:])
                elif rule[0] is 4:
                    qRule = perm_4(rule[1] / (sumW * 6.0), *rule[2:])
                elif rule[0] is 6:
                    qRule = perm_6(rule[1] / (sumW * 6.0), *rule[2:])
                elif rule[0] is 12:
                    qRule = perm_12(rule[1] / (sumW * 6.0), *rule[2:])
                elif rule[0] is 24:
                    qRule = perm_24(rule[1] / (sumW * 6.0), *rule[2:])

                for qp in qRule:
                    output_file.write("w[" + str(i) + "] = " + str(qp.w) + ";\n")
                    output_file.write(
                        "z[" + str(i) + "] = Point(" + str(qp.x) + ", " + str(qp.y) + ", " + str(qp.z) + ");\n")
                    i += 1

            output_file.write("break;\n")


if __name__ == "__main__":
    for i in multiset_permutations(['A', 'A', 'A', 'A'], 3):
        print(i)
    # write_quad_file(5)
    write_symmetric_file()
