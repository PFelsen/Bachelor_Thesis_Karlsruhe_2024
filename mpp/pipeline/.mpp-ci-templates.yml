.global-variables:
  OS: 'ubuntu'
  PRIORITY: 'frequently'
  OS_VERSION: '22.04'
  BENCHMARK: 'none'
  RUN_PROJECTS: 'all'

# ----------------------------------- build -----------------------------------

.build_template:
  stage: build
  image: ${MPP_REGISTRY}/${MPP_REGISTRY_REPO_RELEASE}/mpp_dev_${OS}:${OS_VERSION}
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    UPSTREAM_COMMIT: ''
    JOB_PRIORITY: ''
    DOCKERFILE: ''
    CMAKE_ARGS: ''
    CACHE_NAME: ''
    FF_USE_FASTZIP: "true" # enable fastzip - a faster zip implementation that also supports level configuration.
    ARTIFACT_COMPRESSION_LEVEL: default # can also be set to fastest, fast, slow and slowest. If just enabling fastzip is not enough try setting this to fastest or fast.
    CACHE_COMPRESSION_LEVEL: default # same as above, but for caches
    TRANSFER_METER_FREQUENCY: 5s # will display transfer progress every 5 seconds for artifacts and remote caches.

  only:
    variables: [ ($BENCHMARK == 'none') && ($RUN_PROJECTS == 'all') && ($JOB_PRIORITY == $PRIORITY || $JOB_PRIORITY == 'frequently')]
  before_script:
    - CACHE_NAME="${CI_JOB_NAME}-${OS}${OS_VERSION}:${CI_COMMIT_REF_SLUG}"
    - echo "CACHE_NAME=${CACHE_NAME}" >> build.env
    - cat build.env
  script:
#    - export # for debugging
    - git config --global --add safe.directory $(pwd)
    - |
      if [ "${UPSTREAM_COMMIT}" = "" ]; then
        echo "No UPSTREAM_COMMIT"
      else
        echo "UPSTREAM_COMMIT: ${UPSTREAM_COMMIT}"
        cd mpp
        git config --global --add safe.directory $(pwd)
        git config --get remote.origin.fetch
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        git config --get remote.origin.fetch
        git fetch --dry-run
        git fetch --no-recurse-submodules
        echo "Checkout ${UPSTREAM_COMMIT}"
        git checkout ${UPSTREAM_COMMIT}
        cd ..;
      fi
      echo "CMAKE_ARGS: ${CMAKE_ARGS}"
      mkdir -p build
      cd build
      rm -f -- CMakeCache.txt
      cmake .. ${CMAKE_ARGS}
      make -j16
  cache:
    - key: ${CI_JOB_NAME}-${OS}${OS_VERSION}:${CI_COMMIT_REF_SLUG}
      paths:
        - build/
      policy: "push"
  artifacts:
    reports:
      dotenv: build.env
  tags: [ k8s ]

# ----------------------------------- test ------------------------------------

.test_template:
  # IMPORTANT: Dependencies have to be set or cache can't be found
  image: ${MPP_REGISTRY}/${MPP_REGISTRY_REPO_RELEASE}/mpp_dev_${OS}:${OS_VERSION}
  stage: test
  only:
    variables: [ ($BENCHMARK == 'none') && ($RUN_PROJECTS == 'all') && ($JOB_PRIORITY == $PRIORITY || $JOB_PRIORITY == 'frequently')]
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - cd build
  cache:
    - key: ${CACHE_NAME}
      paths:
        - build/
      policy: "pull"
  tags: [ k8s ]

# -------------------------------- benchmark ----------------------------------

.notebook_template:
  stage: benchmark
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    NOTEBOOK_NAME: 'NOTEBOOK_NAME'
    CELL_TIMEOUT: '1200'
  timeout: '1h'
  script:
    - jupyter nbconvert
      --ExecutePreprocessor.timeout=${CELL_TIMEOUT}
      --ExecutePreprocessor.allow_errors=True
      --output-dir=$CI_PROJECT_DIR
      --execute --to html
      ${NOTEBOOK_NAME}.ipynb
    - (! grep -i "Traceback\|abort" $CI_PROJECT_DIR/${NOTEBOOK_NAME}.html)
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/build/data/vtu/*.vtu
      - $CI_PROJECT_DIR/build/data/py/*.png
      - $CI_PROJECT_DIR/build/json/*.json
      - $CI_PROJECT_DIR/build/log/*.log
      - $CI_PROJECT_DIR/*.html

.notebook_template_kubernetes:
  extends: .notebook_template
  image: ${MPP_REGISTRY}/${MPP_REGISTRY_REPO_RELEASE}/mpp_dev_${OS}:${OS_VERSION}
  tags: [ k8s ]

.notebook_template_docker_pde:
  extends: .notebook_template
  image: ${MPP_REGISTRY}/${MPP_REGISTRY_REPO_RELEASE}/mpp_dev_${OS}:${OS_VERSION}
  tags:
    - k8s

.notebook_template_enroot_bwuni:
  extends: .notebook_template
  image: $MPP_REGISTRY_USER2:$MPP_REGISTRY_PASS@${MPP_REGISTRY}#${MPP_REGISTRY_REPO_RELEASE}/mpp_dev_${OS}:${OS_VERSION}
  tags:
    - enroot
    - bwuni_test

.notebook_template_enroot_horeka:
  extends: .notebook_template
  image: $MPP_REGISTRY_USER2:$MPP_REGISTRY_PASS@${MPP_REGISTRY}#${MPP_REGISTRY_REPO_RELEASE}/mpp_dev_${OS}:${OS_VERSION}
  tags:
    - enroot
    - horeka_test

.benchmark_template:
  # Please read:
  # https://www.nhr.kit.edu/userdocs/horeka/batch_slurm_interactive/
  # https://www.nhr.kit.edu/userdocs/horeka/filesystems/
  # https://www.nhr.kit.edu/userdocs/horeka/software/
  # https://www.nhr.kit.edu/userdocs/horeka/batch/
  # https://www.nhr.kit.edu/userdocs/ci/ci-level2/
  # https://wiki.bwhpc.de/e/Main_Page
  stage: benchmark
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    USE_MPP_DATA: 'false'
    USE_LSDF: 'false'
    CMAKE_ARGS: ''
    WORKSPACE: ''
  timeout: '3d'
  before_script:
    - kit_project_usage
    - sinfo_t_idle
    - echo "Starting job ${CI_JOB_NAME}-${CI_PIPELINE_ID}"
    - shopt -s expand_aliases
    - alias salloc="salloc -J ${CI_JOB_NAME}-${CI_PIPELINE_ID} --mail-user=${GITLAB_USER_EMAIL}"
    - module load devel/cmake/3.18
    - module load compiler/gnu/11
    - module load mpi/openmpi/4.0
    - module load jupyter/base/2023-04-28
    - echo "Build workspace mpp-build-${CI_JOB_NAME}"
    - ws_allocate mpp-build-${CI_JOB_NAME} 30
    - echo "WORKSPACE=$(ws_find mpp-build-${CI_JOB_NAME})"
    - WORKSPACE=$(ws_find mpp-build-${CI_JOB_NAME})
    - cd $WORKSPACE
    - rm -rf data && rm -rf log && rm -rf json && mkdir data && mkdir json && mkdir log && rm -f CMakeCache.txt
    - echo "cmake $CI_PROJECT_DIR $CMAKE_ARGS && make -j"
    - cmake $CI_PROJECT_DIR $CMAKE_ARGS && make -j
  after_script:
    - for jobid in `sacct -P --delimiter=" " | grep ${CI_JOB_NAME}-${CI_PIPELINE_ID} | awk {' print $1 '}`; do seff $jobid; done
    - cd $(ws_find mpp-build-${CI_JOB_NAME})/pipeline
    - ./archive.sh
  artifacts:
    name: ${CI_JOB_NAME}
    when: always
    paths:
      - $CI_PROJECT_DIR/*.json
      - $CI_PROJECT_DIR/*.vtu
      - $CI_PROJECT_DIR/*.png
      - $CI_PROJECT_DIR/*.log
      - $CI_PROJECT_DIR/*.vtk


.benchmark_on_horeka:
  extends: .benchmark_template
  only:
    variables:
      - $BENCHMARK == $CI_JOB_NAME || $BENCHMARK == 'all' || $BENCHMARK == 'on-horeka'
  tags:
    - shell
    - horeka

.benchmark_on_bwuni:
  extends: .benchmark_template
  only:
    variables:
      - $BENCHMARK == $CI_JOB_NAME || $BENCHMARK == 'all' || $BENCHMARK == 'on-bwuni'
  tags:
    - shell
    - bwuni

.benchmark_on_horeka_slurm:
  extends: .benchmark_template
  only:
    variables:
      - $BENCHMARK == $CI_JOB_NAME || $BENCHMARK == 'all' || $BENCHMARK == 'on-horeka'
  tags:
    - slurm
    - horeka_test

dummy-benchmark-on-horeka:
  extends: .benchmark_on_horeka
  before_script:
    - echo "Build workspace mpp-build-${CI_JOB_NAME}"
    - ws_allocate mpp-build-${CI_JOB_NAME} 3
    - WORKSPACE=$(ws_find mpp-build-${CI_JOB_NAME})
    - mkdir -p $WORKSPACE/pipeline/
    - mkdir -p $WORKSPACE/log
    - cp $CI_PROJECT_DIR/pipeline/archive.sh $WORKSPACE/pipeline/
    - echo 'Build skipped'
  script:
    - touch $WORKSPACE/log/dummy.log

dummy-benchmark-on-bwuni:
  extends: .benchmark_on_bwuni
  before_script:
    - echo "Build workspace mpp-build-${CI_JOB_NAME}"
    - ws_allocate mpp-build-${CI_JOB_NAME} 3
    - WORKSPACE=$(ws_find mpp-build-${CI_JOB_NAME})
    - mkdir -p $WORKSPACE/pipeline/
    - mkdir -p $WORKSPACE/log
    - cp $CI_PROJECT_DIR/pipeline/archive.sh $WORKSPACE/pipeline/
    - echo 'Build skipped'
  script:
    - touch $WORKSPACE/log/dummy.log

# ---------------------------------- publish ----------------------------------

.publish_template:
  image: docker:latest
  stage: publish
  only:
    - tags
  variables:
    GIT_STRATEGY: none
    IMAGE_NAME: "${CI_JOB_NAME#build-}-${OS}${OS_VERSION}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}"
  before_script:
    - docker login -u $MPP_REGISTRY_USER -p $MPP_REGISTRY_PASS ${MPP_REGISTRY}
  script:
    - docker pull ${MPP_REGISTRY}/${MPP_REGISTRY_REPO_DEV}/${IMAGE_NAME}
    - docker tag ${MPP_REGISTRY}/${MPP_REGISTRY_REPO_DEV}/${IMAGE_NAME}
      ${MPP_REGISTRY}/${MPP_REGISTRY_REPO_RELEASE}/${CI_JOB_NAME#build-}-${OS}${OS_VERSION}:${CI_COMMIT_TAG}
    - docker push ${MPP_REGISTRY}/${MPP_REGISTRY_REPO_RELEASE}/${CI_JOB_NAME#build-}-${OS}${OS_VERSION}:${CI_COMMIT_TAG}
  after_script:
    - docker rmi ${MPP_REGISTRY}/${MPP_REGISTRY_REPO_DEV}/${IMAGE_NAME}
    - docker rmi ${MPP_REGISTRY}/${MPP_REGISTRY_REPO_RELEASE}/${CI_JOB_NAME#build-}-${OS}${OS_VERSION}:${CI_COMMIT_TAG}
  tags: [ docker ]
