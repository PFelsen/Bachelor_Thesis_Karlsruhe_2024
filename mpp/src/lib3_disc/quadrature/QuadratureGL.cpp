#include "QuadratureGL.hpp"

#include <algorithm>

#include "GaussLobattoNodalPoints.hpp"

template<>
QintGaussLobattoT<double, SpaceDimension, TimeDimension>::QintGaussLobattoT(int npcount) :
    Quadrature("QGaussLobatto", npcount) {
  const vector<double> &Q = GAUSSLOBATTO_NODALPOINTS.at(npcount);
  std::transform(Q.begin(), Q.end(), z.begin(), [](double d) { return Point(d); });
  switch (npcount) {
  case 1:
    w[0] = 1;
    break;
  case 2:
    w[0] = 0.5;
    w[1] = 0.5;
    break;
  case 3:
    w[0] = 0.1666666666666666666666666667;
    w[1] = 0.6666666666666666666666666667;
    w[2] = 0.1666666666666666666666666667;
    break;
  case 4:
    w[0] = 0.08333333333333333333333333333;
    w[1] = 0.4166666666666666666666666667;
    w[2] = 0.4166666666666666666666666667;
    w[3] = 0.08333333333333333333333333333;
    break;
  case 5:
    w[0] = 0.05;
    w[1] = 0.2722222222222222222222222227;
    w[2] = 0.3555555555555555555555555556;
    w[3] = 0.2722222222222222222222222227;
    w[4] = 0.05;
    break;
  case 6:
    w[0] = 0.03333333333333333333333333333;
    w[1] = 0.1892374781489234901583064038;
    w[2] = 0.2774291885177431765083602625;
    w[3] = 0.2774291885177431765083602625;
    w[4] = 0.1892374781489234901583064038;
    w[5] = 0.03333333333333333333333333333;
    break;
  case 7:
    w[0] = 0.02380952380952380952380952381;
    w[1] = 0.1384130236807829740053502032;
    w[2] = 0.2158726906049313117089355112;
    w[3] = 0.2438095238095238095238095238;
    w[4] = 0.2158726906049313117089355112;
    w[5] = 0.1384130236807829740053502032;
    w[6] = 0.02380952380952380952380952381;
    break;
  case 8:
    w[0] = 0.01785714285714285714285714286;
    w[1] = 0.1053521135717530196914960331;
    w[2] = 0.1705613462417521823821203382;
    w[3] = 0.2062293973293519407835264855;
    w[4] = 0.2062293973293519407835264855;
    w[5] = 0.1705613462417521823821203382;
    w[6] = 0.1053521135717530196914960331;
    w[7] = 0.01785714285714285714285714286;
    break;
  case 9:
    w[0] = 0.01388888888888888888888888889;
    w[1] = 0.08274768078040276252316985996;
    w[2] = 0.1372693562500808676403528092;
    w[3] = 0.1732142554865231725575657661;
    w[4] = 0.1857596371882086167800453515;
    w[5] = 0.1732142554865231725575657661;
    w[6] = 0.1372693562500808676403528092;
    w[7] = 0.08274768078040276252316985996;
    w[8] = 0.01388888888888888888888888889;
    break;
  case 10:
    w[0] = 0.01111111111111111111111111111;
    w[1] = 0.06665299542553505556311358541;
    w[2] = 0.1124446710315632260597289109;
    w[3] = 0.1460213418398418789377911287;
    w[4] = 0.1637698805919487283282552640;
    w[5] = 0.1637698805919487283282552640;
    w[6] = 0.1460213418398418789377911287;
    w[7] = 0.1124446710315632260597289109;
    w[8] = 0.06665299542553505556311358541;
    w[9] = 0.01111111111111111111111111111;
    break;
  case 11:
    w[0] = 0.009090909090909090909090909091;
    w[1] = 0.05480613663349743223070172489;
    w[2] = 0.09358494089015260205407076116;
    w[3] = 0.1240240521320141570200424332;
    w[4] = 0.1434395623895040443396112014;
    w[5] = 0.1501087977278453468929659406;
    w[6] = 0.1434395623895040443396112014;
    w[7] = 0.1240240521320141570200424332;
    w[8] = 0.09358494089015260205407076116;
    w[9] = 0.05480613663349743223070172489;
    w[10] = 0.009090909090909090909090909091;
    break;
  case 12:
    w[0] = 0.007575757575757575757575757576;
    w[1] = 0.04584225870659806533417129710;
    w[2] = 0.07898735278218505758233553140;
    w[3] = 0.1062542088805105726791510384;
    w[4] = 0.1256378015996006401466222061;
    w[5] = 0.1357026204553480885001441693;
    w[6] = 0.1357026204553480885001441693;
    w[7] = 0.1256378015996006401466222061;
    w[8] = 0.1062542088805105726791510384;
    w[9] = 0.07898735278218505758233553140;
    w[10] = 0.04584225870659806533417129710;
    w[11] = 0.007575757575757575757575757576;
    break;
  case 13:
    w[0] = 0.006410256410256410256410256410;
    w[1] = 0.03890084337340946389679449411;
    w[2] = 0.06749096334480417455995738148;
    w[3] = 0.09182343260177504600374712947;
    w[4] = 0.1103838967830550430427670042;
    w[5] = 0.1220078951533381782292890742;
    w[6] = 0.1259654246667233680220693208;
    w[7] = 0.1220078951533381782292890742;
    w[8] = 0.1103838967830550430427670042;
    w[9] = 0.09182343260177504600374712947;
    w[10] = 0.06749096334480417455995738148;
    w[11] = 0.03890084337340946389679449411;
    w[12] = 0.006410256410256410256410256410;
    break;
  case 14:
    w[0] = 0.005494505494505494505494505495;
    w[1] = 0.03341864224884064231703533032;
    w[2] = 0.05829332794935582577049833520;
    w[3] = 0.08001092588147607120641049910;
    w[4] = 0.09741307468670805932016588893;
    w[5] = 0.1095631265048853774355812618;
    w[6] = 0.1158063972342285294448141786;
    w[7] = 0.1158063972342285294448141788;
    w[8] = 0.1095631265048853774355812618;
    w[9] = 0.09741307468670805932016588893;
    w[10] = 0.08001092588147607120641049910;
    w[11] = 0.05829332794935582577049833520;
    w[12] = 0.03341864224884064231703533032;
    w[13] = 0.005494505494505494505494505495;
  default:
    Exit("Quadrature with more than " + std::to_string(npcount)
         + " QP not implemented for GaussLobatto interval quadrature!");
  }
  name = "QintGaussLobatto: with " + std::to_string(npcount) + " QP, exact up to degree"
         + std::to_string(2 * npcount - 3);
}
