#ifndef TESTTENSORDATA_H
#define TESTTENSORDATA_H

#include <array>
#include <vector>

struct TensorData {
  std::array<double, 9> tensorValues;
  std::array<double, 9> inverseValues;
};

static std::vector<TensorData> tensorInvertData_1{
    {{1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000},
     {1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000}},
};

static std::vector<TensorData> tensorInvertData_2{
    {{2.0000, 3.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000},
     {-1.0000, 3.0000, -0.0000, 1.0000, -2.0000, 0.0000, 0.0000, 0.0000, 1.0000}},
    {{1.0000, 3.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000},
     {-0.5000, 1.5000, -0.0000, 0.5000, -0.5000, 0.0000, 0.0000, 0.0000, 1.0000}},
};

static std::vector<TensorData>
    tensorInvertData_3{{{1.0000, 1.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000},
                        {1.0000, -1.0000, -0.0000, 0.0000, 1.0000, -0.0000, 0.0000, 0.0000,
                         1.0000}},
                       {{1.0000, 0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000},
                        {1.0000, 0.0000, -1.0000, 0.0000, 1.0000, -0.0000, 0.0000, 0.0000, 1.0000}},
                       {{1.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000},
                        {1.0000, 0.0000, -0.0000, -1.0000, 1.0000, -0.0000, 0.0000, 0.0000,
                         1.0000}},
                       {{1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.0000, 1.0000},
                        {1.0000, 0.0000, -0.0000, 0.0000, 1.0000, -1.0000, 0.0000, 0.0000, 1.0000}},
                       {{1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 1.0000, 0.0000, 1.0000},
                        {1.0000, 0.0000, -0.0000, 0.0000, 1.0000, -0.0000, -1.0000, 0.0000,
                         1.0000}},
                       {{1.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 1.0000, 1.0000},
                        {1.0000, 0.0000, -0.0000, 0.0000, 1.0000, -0.0000, 0.0000, -1.0000,
                         1.0000}},
                       {{1.0000, 2.0000, 2.0000, 1.0000, 1.0000, 0.0000, 0.0000, 0.0000, 1.0000},
                        {-1.0000, 2.0000, 2.0000, 1.0000, -1.0000, -2.0000, 0.0000, 0.0000,
                         1.0000}},
                       {{1.0000, 2.0000, 1.0000, 1.0000, 1.0000, 0.0000, 1.0000, 0.0000, 1.0000},
                        {-0.5000, 1.0000, 0.5000, 0.5000, -0.0000, -0.5000, 0.5000, -1.0000,
                         0.5000}},
                       {{1.0000, 2.0000, 1.0000, 1.0000, 1.0000, 0.0000, 1.0000, 1.0000, 1.0000},
                        {-1.0000, 1.0000, 1.0000, 1.0000, 0.0000, -1.0000, 0.0000, -1.0000,
                         1.0000}},
                       {{1.0000, 2.0000, 1.0000, 1.0000, 1.0000, 2.0000, 1.0000, 1.0000, 1.0000},
                        {-1.0000, -1.0000, 3.0000, 1.0000, 0.0000, -1.0000, 0.0000, 1.0000,
                         -1.0000}},
                       {{1.0000, 2.0000, 2.0000, 1.0000, 1.0000, 2.0000, 1.0000, 1.0000, 1.0000},
                        {-1.0000, 0.0000, 2.0000, 1.0000, -1.0000, -0.0000, 0.0000, 1.0000,
                         -1.0000}},
                       {{2.0000, 2.0000, 2.0000, 5.0000, 1.0000, 1.0000, 1.0000, 2.0000, 1.0000},
                        {-0.1250, 0.2500, 0.0000, -0.5000, 0.0000, 1.0000, 1.1250, -0.2500,
                         -1.0000}},
                       {{2.0000, 2.0000, 1.0000, 5.0000, 1.0000, 1.0000, 1.0000, 2.0000, 4.0000},
                        {-0.0800, 0.2400, -0.0400, 0.7600, -0.2800, -0.1200, -0.3600, 0.0800,
                         0.3200}},
                       {{2.0000, 3.0000, 2.0000, 1.0000, 1.0000, 2.0000, 1.0000, 3.0000, 2.0000},
                        {1.0000, -0.0000, -1.0000, 0.0000, -0.5000, 0.5000, -0.5000, 0.7500,
                         0.2500}}};

std::vector<TensorData> combineTensorData(std::vector<TensorData> &v1,
                                          std::vector<TensorData> &v2) {
  std::vector<TensorData> w(v1);
  w.insert(w.end(), v2.begin(), v2.end());
  return w;
}

std::vector<TensorData> combineTensorData(std::vector<TensorData> &v1, std::vector<TensorData> &v2,
                                          std::vector<TensorData> &v3) {
  std::vector<TensorData> w(v1);
  w.insert(w.end(), v2.begin(), v2.end());
  w.insert(w.end(), v3.begin(), v3.end());
  return w;
}

#endif // TESTTENSORDATA_H