#include "LagrangeDoF.hpp"
#include "TestDoF.hpp"

class LagrangeDoFTest : public DoFTest {
protected:
  LagrangeDoFTest(CELLTYPE type) :
      DoFTest(type, "LagrangeDoF (degree=" + std::to_string(GetParam().degree) + ")") {
    doF = new LagrangeDoF(GetParam().degree);
  }
};

class LagrangeDoFIntervalTest : public LagrangeDoFTest {
protected:
  LagrangeDoFIntervalTest() : LagrangeDoFTest(INTERVAL) {}
};

DOF_TESTS(LagrangeDoFIntervalTest)

INSTANTIATE_TEST_CASE_P(
    LagrangeDoFTest, LagrangeDoFIntervalTest,
    Values(DoFData{0, {Point(0.5)}, vector<short>(1, 1), {{}, {}}},
           DoFData{1, {Point(0.0), Point(1.0)}, vector<short>(2, 1), {{0}, {1}}},
           DoFData{2,
                   {Point(0.0 / 2.0), Point(1.0 / 2.0), Point(2.0 / 2.0)},
                   vector<short>(3, 1),
                   {{0}, {2}}},
           DoFData{3,
                   {Point(0.0 / 3.0), Point(1.0 / 3.0), Point(2.0 / 3.0), Point(3.0 / 3.0)},
                   vector<short>(4, 1),
                   {{0}, {3}}},
           DoFData{4,
                   {Point(0.0 / 4.0), Point(1.0 / 4.0), Point(2.0 / 4.0), Point(3.0 / 4.0),
                    Point(4.0 / 4.0)},
                   vector<short>(5, 1),
                   {{0}, {4}}}));

#if SpaceDimension >= 2

class LagrangeDoFTriangleTest : public LagrangeDoFTest {
protected:
  LagrangeDoFTriangleTest() : LagrangeDoFTest(TRIANGLE) {}
};

DOF_TESTS(LagrangeDoFTriangleTest)

INSTANTIATE_TEST_CASE_P(
    LagrangeDoFTest, LagrangeDoFTriangleTest,
    Values(DoFData{0, {Point(1.0 / 3.0, 1.0 / 3.0)}, vector<short>(1, 1), {{}, {}, {}}},
           DoFData{1,
                   {Point(0.0, 0.0), Point(1.0, 0.0), Point(0.0, 1.0)},
                   vector<short>(3, 1),
                   {{0, 1}, {1, 2}, {2, 0}}},
           DoFData{2,
                   {Point(0.0, 0.0), Point(1.0, 0.0), Point(0.0, 1.0), Point(0.5, 0.0),
                    Point(0.5, 0.5), Point(0.0, 0.5)},
                   vector<short>(6, 1),
                   {{0, 3, 1}, {1, 4, 2}, {2, 5, 0}}},
           DoFData{3,
                   {Point(0.0, 0.0), Point(1.0, 0.0), Point(0.0, 1.0), Point(1.0 / 3.0, 0.0),
                    Point(2.0 / 3.0, 1.0 / 3.0), Point(0.0, 2.0 / 3.0), Point(2.0 / 3.0, 0.0),
                    Point(1.0 / 3.0, 2.0 / 3.0), Point(0.0, 1.0 / 3.0),
                    Point(1.0 / 3.0, 1.0 / 3.0)},
                   vector<short>(10, 1),
                   {{0, 3, 6, 1}, {1, 4, 7, 2}, {2, 5, 8, 0}}},
           DoFData{4,
                   {Point(0.0, 0.0), Point(1.0, 0.0), Point(0.0, 1.0), Point(0.25, 0.0),
                    Point(0.75, 0.25), Point(0.0, 0.75), Point(0.5, 0.0), Point(0.5, 0.5),
                    Point(0.0, 0.5), Point(0.75, 0.0), Point(0.25, 0.75), Point(0.0, 0.25),
                    Point(0.25, 0.25), Point(0.5, 0.25), Point(0.25, 0.5)},
                   vector<short>(15, 1),
                   {{0, 3, 6, 9, 1}, {1, 4, 7, 10, 2}, {2, 5, 8, 11, 0}}}));

class LagrangeDoFQuadrilateralTest : public LagrangeDoFTest {
protected:
  LagrangeDoFQuadrilateralTest() : LagrangeDoFTest(QUADRILATERAL) {}
};

DOF_TESTS(LagrangeDoFQuadrilateralTest)

INSTANTIATE_TEST_CASE_P(
    LagrangeDoFTest, LagrangeDoFQuadrilateralTest,
    Values(
        DoFData{0, {Point(0.5, 0.5)}, vector<short>(1, 1), {{}, {}, {}, {}}},
        DoFData{1,
                {Point(0.0, 0.0), Point(1.0, 0.0), Point(0.0, 1.0), Point(1.0, 1.0)},
                vector<short>(4, 1),
                {{0, 1}, {1, 3}, {2, 3}, {0, 2}}},
        DoFData{2,
                {Point(0.0 / 2.0, 0.0 / 2.0), Point(1.0 / 2.0, 0.0 / 2.0),
                 Point(2.0 / 2.0, 0.0 / 2.0), Point(0.0 / 2.0, 1.0 / 2.0),
                 Point(1.0 / 2.0, 1.0 / 2.0), Point(2.0 / 2.0, 1.0 / 2.0),
                 Point(0.0 / 2.0, 2.0 / 2.0), Point(1.0 / 2.0, 2.0 / 2.0),
                 Point(2.0 / 2.0, 2.0 / 2.0)},
                vector<short>(9, 1),
                {{0, 1, 2}, {2, 5, 8}, {6, 7, 8}, {0, 3, 6}}},
        DoFData{3,
                {Point(0.0 / 3.0, 0.0 / 3.0), Point(1.0 / 3.0, 0.0 / 3.0),
                 Point(2.0 / 3.0, 0.0 / 3.0), Point(3.0 / 3.0, 0.0 / 3.0),
                 Point(0.0 / 3.0, 1.0 / 3.0), Point(1.0 / 3.0, 1.0 / 3.0),
                 Point(2.0 / 3.0, 1.0 / 3.0), Point(3.0 / 3.0, 1.0 / 3.0),
                 Point(0.0 / 3.0, 2.0 / 3.0), Point(1.0 / 3.0, 2.0 / 3.0),
                 Point(2.0 / 3.0, 2.0 / 3.0), Point(3.0 / 3.0, 2.0 / 3.0),
                 Point(0.0 / 3.0, 3.0 / 3.0), Point(1.0 / 3.0, 3.0 / 3.0),
                 Point(2.0 / 3.0, 3.0 / 3.0), Point(3.0 / 3.0, 3.0 / 3.0)},
                vector<short>(16, 1),
                {{0, 1, 2, 3}, {3, 7, 11, 15}, {12, 13, 14, 15}, {0, 4, 8, 12}}},
        DoFData{4,
                {Point(0.0 / 4.0, 0.0 / 4.0), Point(1.0 / 4.0, 0.0 / 4.0),
                 Point(2.0 / 4.0, 0.0 / 4.0), Point(3.0 / 4.0, 0.0 / 4.0),
                 Point(4.0 / 4.0, 0.0 / 4.0), Point(0.0 / 4.0, 1.0 / 4.0),
                 Point(1.0 / 4.0, 1.0 / 4.0), Point(2.0 / 4.0, 1.0 / 4.0),
                 Point(3.0 / 4.0, 1.0 / 4.0), Point(4.0 / 4.0, 1.0 / 4.0),
                 Point(0.0 / 4.0, 2.0 / 4.0), Point(1.0 / 4.0, 2.0 / 4.0),
                 Point(2.0 / 4.0, 2.0 / 4.0), Point(3.0 / 4.0, 2.0 / 4.0),
                 Point(4.0 / 4.0, 2.0 / 4.0), Point(0.0 / 4.0, 3.0 / 4.0),
                 Point(1.0 / 4.0, 3.0 / 4.0), Point(2.0 / 4.0, 3.0 / 4.0),
                 Point(3.0 / 4.0, 3.0 / 4.0), Point(4.0 / 4.0, 3.0 / 4.0),
                 Point(0.0 / 4.0, 4.0 / 4.0), Point(1.0 / 4.0, 4.0 / 4.0),
                 Point(2.0 / 4.0, 4.0 / 4.0), Point(3.0 / 4.0, 4.0 / 4.0),
                 Point(4.0 / 4.0, 4.0 / 4.0)},
                vector<short>(25, 1),
                {{0, 1, 2, 3, 4}, {4, 9, 14, 19, 24}, {20, 21, 22, 23, 24}, {0, 5, 10, 15, 20}}}));

#endif
#if SpaceDimension >= 3

class LagrangeDoFTetrahedronTest : public LagrangeDoFTest {
protected:
  LagrangeDoFTetrahedronTest() : LagrangeDoFTest(TETRAHEDRON) {}
};

DOF_TESTS(LagrangeDoFTetrahedronTest)

INSTANTIATE_TEST_CASE_P(
    LagrangeDoFTest, LagrangeDoFTetrahedronTest,
    Values(
        DoFData{0, {Point(1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0)}, vector<short>(1, 1), {{}, {}, {}, {}}},
        DoFData{1,
                {Point(0.0, 0.0, 0.0), Point(1.0, 0.0, 0.0), Point(0.0, 1.0, 0.0),
                 Point(0.0, 0.0, 1.0)},
                vector<short>(4, 1),
                {{0, 2, 1}, {1, 2, 3}, {0, 3, 2}, {0, 1, 3}}},
        DoFData{2,
                {Point(0.0, 0.0, 0.0), Point(0.5, 0.0, 0.0), Point(1.0, 0.0, 0.0),
                 Point(0.0, 0.5, 0.0), Point(0.5, 0.5, 0.0), Point(0.0, 1.0, 0.0),
                 Point(0.0, 0.0, 0.5), Point(0.5, 0.0, 0.5), Point(0.0, 0.5, 0.5),
                 Point(0.0, 0.0, 1.0)},
                vector<short>(10, 1),
                {{0, 3, 5, 1, 4, 2}, {2, 4, 5, 7, 8, 9}, {0, 6, 9, 3, 8, 5}, {0, 1, 2, 6, 7, 9}}},
        DoFData{3,
                {Point(0.0, 0.0, 0.0),
                 Point(1.0 / 3.0, 0.0, 0.0),
                 Point(2.0 / 3.0, 0.0, 0.0),
                 Point(1.0, 0.0, 0.0),
                 Point(0.0, 1.0 / 3.0, 0.0),
                 Point(1.0 / 3.0, 1.0 / 3.0, 0.0),
                 Point(2.0 / 3.0, 1.0 / 3.0, 0.0),
                 Point(0.0, 2.0 / 3.0, 0.0),
                 Point(1.0 / 3.0, 2.0 / 3.0, 0.0),
                 Point(0.0, 1.0, 0.0),
                 Point(0.0, 0.0, 1.0 / 3.0),
                 Point(1.0 / 3.0, 0.0, 1.0 / 3.0),
                 Point(2.0 / 3.0, 0.0, 1.0 / 3.0),
                 Point(0.0, 1.0 / 3.0, 1.0 / 3.0),
                 Point(1.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0),
                 Point(0.0, 2.0 / 3.0, 1.0 / 3.0),
                 Point(0.0, 0.0, 2.0 / 3.0),
                 Point(1.0 / 3.0, 0.0, 2.0 / 3.0),
                 Point(0.0, 1.0 / 3.0, 2.0 / 3.0),
                 Point(0.0, 0.0, 1.0)},
                vector<short>(20, 1),
                {{0, 4, 7, 9, 1, 5, 8, 2, 6, 3},
                 {3, 6, 8, 9, 12, 14, 15, 17, 18, 19},
                 {0, 10, 16, 19, 4, 13, 18, 7, 15, 9},
                 {0, 1, 2, 3, 10, 11, 12, 16, 17, 19}}},
        DoFData{4,
                {Point(0, 0, 0),         Point(0.25, 0, 0),    Point(0.5, 0, 0),
                 Point(0.75, 0, 0),      Point(1, 0, 0),       Point(0, 0.25, 0),
                 Point(0.25, 0.25, 0),   Point(0.5, 0.25, 0),  Point(0.75, 0.25, 0),
                 Point(0, 0.5, 0),       Point(0.25, 0.5, 0),  Point(0.5, 0.5, 0),
                 Point(0, 0.75, 0),      Point(0.25, 0.75, 0), Point(0, 1, 0),
                 Point(0, 0, 0.25),      Point(0.25, 0, 0.25), Point(0.5, 0, 0.25),
                 Point(0.75, 0, 0.25),   Point(0, 0.25, 0.25), Point(0.25, 0.25, 0.25),
                 Point(0.5, 0.25, 0.25), Point(0, 0.5, 0.25),  Point(0.25, 0.5, 0.25),
                 Point(0, 0.75, 0.25),   Point(0, 0, 0.5),     Point(0.25, 0, 0.5),
                 Point(0.5, 0, 0.5),     Point(0, 0.25, 0.5),  Point(0.25, 0.25, 0.5),
                 Point(0, 0.5, 0.5),     Point(0, 0, 0.75),    Point(0.25, 0, 0.75),
                 Point(0, 0.25, 0.75),   Point(0, 0, 1)},
                vector<short>(35, 1),
                {{0, 5, 9, 12, 14, 1, 6, 10, 13, 2, 7, 11, 3, 8, 4},
                 {4, 8, 11, 13, 14, 18, 21, 23, 24, 27, 29, 30, 32, 33, 34},
                 {0, 15, 25, 31, 34, 5, 19, 28, 33, 9, 22, 30, 12, 24, 14},
                 {0, 1, 2, 3, 4, 15, 16, 17, 18, 25, 26, 27, 31, 32, 34}}}));

class LagrangeDoFHexahedronTest : public LagrangeDoFTest {
protected:
  LagrangeDoFHexahedronTest() : LagrangeDoFTest(HEXAHEDRON) {}
};

DOF_TESTS(LagrangeDoFHexahedronTest)

INSTANTIATE_TEST_CASE_P(
    LagrangeDoFTest, LagrangeDoFHexahedronTest,
    Values(DoFData{0, {Point(0.5, 0.5, 0.5)}, vector<short>(1, 1), {{}, {}, {}, {}, {}, {}}},
           DoFData{1,
                   {Point(0.0, 0.0, 0.0), Point(1.0, 0.0, 0.0), Point(0.0, 1.0, 0.0),
                    Point(1.0, 1.0, 0.0), Point(0.0, 0.0, 1.0), Point(1.0, 0.0, 1.0),
                    Point(0.0, 1.0, 1.0), Point(1.0, 1.0, 1.0)},
                   vector<short>(8, 1),
                   {{0, 1, 2, 3},
                    {0, 1, 4, 5},
                    {1, 3, 5, 7},
                    {2, 3, 6, 7},
                    {0, 2, 4, 6},
                    {4, 5, 6, 7}}},
           DoFData{2,
                   {Point(0.0 / 2.0, 0.0 / 2.0, 0.0 / 2.0), Point(1.0 / 2.0, 0.0 / 2.0, 0.0 / 2.0),
                    Point(2.0 / 2.0, 0.0 / 2.0, 0.0 / 2.0), Point(0.0 / 2.0, 1.0 / 2.0, 0.0 / 2.0),
                    Point(1.0 / 2.0, 1.0 / 2.0, 0.0 / 2.0), Point(2.0 / 2.0, 1.0 / 2.0, 0.0 / 2.0),
                    Point(0.0 / 2.0, 2.0 / 2.0, 0.0 / 2.0), Point(1.0 / 2.0, 2.0 / 2.0, 0.0 / 2.0),
                    Point(2.0 / 2.0, 2.0 / 2.0, 0.0 / 2.0), Point(0.0 / 2.0, 0.0 / 2.0, 1.0 / 2.0),
                    Point(1.0 / 2.0, 0.0 / 2.0, 1.0 / 2.0), Point(2.0 / 2.0, 0.0 / 2.0, 1.0 / 2.0),
                    Point(0.0 / 2.0, 1.0 / 2.0, 1.0 / 2.0), Point(1.0 / 2.0, 1.0 / 2.0, 1.0 / 2.0),
                    Point(2.0 / 2.0, 1.0 / 2.0, 1.0 / 2.0), Point(0.0 / 2.0, 2.0 / 2.0, 1.0 / 2.0),
                    Point(1.0 / 2.0, 2.0 / 2.0, 1.0 / 2.0), Point(2.0 / 2.0, 2.0 / 2.0, 1.0 / 2.0),
                    Point(0.0 / 2.0, 0.0 / 2.0, 2.0 / 2.0), Point(1.0 / 2.0, 0.0 / 2.0, 2.0 / 2.0),
                    Point(2.0 / 2.0, 0.0 / 2.0, 2.0 / 2.0), Point(0.0 / 2.0, 1.0 / 2.0, 2.0 / 2.0),
                    Point(1.0 / 2.0, 1.0 / 2.0, 2.0 / 2.0), Point(2.0 / 2.0, 1.0 / 2.0, 2.0 / 2.0),
                    Point(0.0 / 2.0, 2.0 / 2.0, 2.0 / 2.0), Point(1.0 / 2.0, 2.0 / 2.0, 2.0 / 2.0),
                    Point(2.0 / 2.0, 2.0 / 2.0, 2.0 / 2.0)},
                   vector<short>(27, 1),
                   {{0, 1, 2, 3, 4, 5, 6, 7, 8},
                    {0, 1, 2, 9, 10, 11, 18, 19, 20},
                    {2, 5, 8, 11, 14, 17, 20, 23, 26},
                    {6, 7, 8, 15, 16, 17, 24, 25, 26},
                    {0, 3, 6, 9, 12, 15, 18, 21, 24},
                    {18, 19, 20, 21, 22, 23, 24, 25, 26}}},
           DoFData{3,
                   {Point(0.0 / 3.0, 0.0 / 3.0, 0.0 / 3.0), Point(1.0 / 3.0, 0.0 / 3.0, 0.0 / 3.0),
                    Point(2.0 / 3.0, 0.0 / 3.0, 0.0 / 3.0), Point(3.0 / 3.0, 0.0 / 3.0, 0.0 / 3.0),
                    Point(0.0 / 3.0, 1.0 / 3.0, 0.0 / 3.0), Point(1.0 / 3.0, 1.0 / 3.0, 0.0 / 3.0),
                    Point(2.0 / 3.0, 1.0 / 3.0, 0.0 / 3.0), Point(3.0 / 3.0, 1.0 / 3.0, 0.0 / 3.0),
                    Point(0.0 / 3.0, 2.0 / 3.0, 0.0 / 3.0), Point(1.0 / 3.0, 2.0 / 3.0, 0.0 / 3.0),
                    Point(2.0 / 3.0, 2.0 / 3.0, 0.0 / 3.0), Point(3.0 / 3.0, 2.0 / 3.0, 0.0 / 3.0),
                    Point(0.0 / 3.0, 3.0 / 3.0, 0.0 / 3.0), Point(1.0 / 3.0, 3.0 / 3.0, 0.0 / 3.0),
                    Point(2.0 / 3.0, 3.0 / 3.0, 0.0 / 3.0), Point(3.0 / 3.0, 3.0 / 3.0, 0.0 / 3.0),
                    Point(0.0 / 3.0, 0.0 / 3.0, 1.0 / 3.0), Point(1.0 / 3.0, 0.0 / 3.0, 1.0 / 3.0),
                    Point(2.0 / 3.0, 0.0 / 3.0, 1.0 / 3.0), Point(3.0 / 3.0, 0.0 / 3.0, 1.0 / 3.0),
                    Point(0.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0), Point(1.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0),
                    Point(2.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0), Point(3.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0),
                    Point(0.0 / 3.0, 2.0 / 3.0, 1.0 / 3.0), Point(1.0 / 3.0, 2.0 / 3.0, 1.0 / 3.0),
                    Point(2.0 / 3.0, 2.0 / 3.0, 1.0 / 3.0), Point(3.0 / 3.0, 2.0 / 3.0, 1.0 / 3.0),
                    Point(0.0 / 3.0, 3.0 / 3.0, 1.0 / 3.0), Point(1.0 / 3.0, 3.0 / 3.0, 1.0 / 3.0),
                    Point(2.0 / 3.0, 3.0 / 3.0, 1.0 / 3.0), Point(3.0 / 3.0, 3.0 / 3.0, 1.0 / 3.0),
                    Point(0.0 / 3.0, 0.0 / 3.0, 2.0 / 3.0), Point(1.0 / 3.0, 0.0 / 3.0, 2.0 / 3.0),
                    Point(2.0 / 3.0, 0.0 / 3.0, 2.0 / 3.0), Point(3.0 / 3.0, 0.0 / 3.0, 2.0 / 3.0),
                    Point(0.0 / 3.0, 1.0 / 3.0, 2.0 / 3.0), Point(1.0 / 3.0, 1.0 / 3.0, 2.0 / 3.0),
                    Point(2.0 / 3.0, 1.0 / 3.0, 2.0 / 3.0), Point(3.0 / 3.0, 1.0 / 3.0, 2.0 / 3.0),
                    Point(0.0 / 3.0, 2.0 / 3.0, 2.0 / 3.0), Point(1.0 / 3.0, 2.0 / 3.0, 2.0 / 3.0),
                    Point(2.0 / 3.0, 2.0 / 3.0, 2.0 / 3.0), Point(3.0 / 3.0, 2.0 / 3.0, 2.0 / 3.0),
                    Point(0.0 / 3.0, 3.0 / 3.0, 2.0 / 3.0), Point(1.0 / 3.0, 3.0 / 3.0, 2.0 / 3.0),
                    Point(2.0 / 3.0, 3.0 / 3.0, 2.0 / 3.0), Point(3.0 / 3.0, 3.0 / 3.0, 2.0 / 3.0),
                    Point(0.0 / 3.0, 0.0 / 3.0, 3.0 / 3.0), Point(1.0 / 3.0, 0.0 / 3.0, 3.0 / 3.0),
                    Point(2.0 / 3.0, 0.0 / 3.0, 3.0 / 3.0), Point(3.0 / 3.0, 0.0 / 3.0, 3.0 / 3.0),
                    Point(0.0 / 3.0, 1.0 / 3.0, 3.0 / 3.0), Point(1.0 / 3.0, 1.0 / 3.0, 3.0 / 3.0),
                    Point(2.0 / 3.0, 1.0 / 3.0, 3.0 / 3.0), Point(3.0 / 3.0, 1.0 / 3.0, 3.0 / 3.0),
                    Point(0.0 / 3.0, 2.0 / 3.0, 3.0 / 3.0), Point(1.0 / 3.0, 2.0 / 3.0, 3.0 / 3.0),
                    Point(2.0 / 3.0, 2.0 / 3.0, 3.0 / 3.0), Point(3.0 / 3.0, 2.0 / 3.0, 3.0 / 3.0),
                    Point(0.0 / 3.0, 3.0 / 3.0, 3.0 / 3.0), Point(1.0 / 3.0, 3.0 / 3.0, 3.0 / 3.0),
                    Point(2.0 / 3.0, 3.0 / 3.0, 3.0 / 3.0), Point(3.0 / 3.0, 3.0 / 3.0, 3.0 / 3.0)},
                   vector<short>(64, 1),
                   {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
                    {0, 1, 2, 3, 16, 17, 18, 19, 32, 33, 34, 35, 48, 49, 50, 51},
                    {3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63},
                    {12, 13, 14, 15, 28, 29, 30, 31, 44, 45, 46, 47, 60, 61, 62, 63},
                    {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60},
                    {48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}}},
           DoFData{4,
                   {Point(0.0 / 4.0, 0.0 / 4.0, 0.0 / 4.0), Point(1.0 / 4.0, 0.0 / 4.0, 0.0 / 4.0),
                    Point(2.0 / 4.0, 0.0 / 4.0, 0.0 / 4.0), Point(3.0 / 4.0, 0.0 / 4.0, 0.0 / 4.0),
                    Point(4.0 / 4.0, 0.0 / 4.0, 0.0 / 4.0), Point(0.0 / 4.0, 1.0 / 4.0, 0.0 / 4.0),
                    Point(1.0 / 4.0, 1.0 / 4.0, 0.0 / 4.0), Point(2.0 / 4.0, 1.0 / 4.0, 0.0 / 4.0),
                    Point(3.0 / 4.0, 1.0 / 4.0, 0.0 / 4.0), Point(4.0 / 4.0, 1.0 / 4.0, 0.0 / 4.0),
                    Point(0.0 / 4.0, 2.0 / 4.0, 0.0 / 4.0), Point(1.0 / 4.0, 2.0 / 4.0, 0.0 / 4.0),
                    Point(2.0 / 4.0, 2.0 / 4.0, 0.0 / 4.0), Point(3.0 / 4.0, 2.0 / 4.0, 0.0 / 4.0),
                    Point(4.0 / 4.0, 2.0 / 4.0, 0.0 / 4.0), Point(0.0 / 4.0, 3.0 / 4.0, 0.0 / 4.0),
                    Point(1.0 / 4.0, 3.0 / 4.0, 0.0 / 4.0), Point(2.0 / 4.0, 3.0 / 4.0, 0.0 / 4.0),
                    Point(3.0 / 4.0, 3.0 / 4.0, 0.0 / 4.0), Point(4.0 / 4.0, 3.0 / 4.0, 0.0 / 4.0),
                    Point(0.0 / 4.0, 4.0 / 4.0, 0.0 / 4.0), Point(1.0 / 4.0, 4.0 / 4.0, 0.0 / 4.0),
                    Point(2.0 / 4.0, 4.0 / 4.0, 0.0 / 4.0), Point(3.0 / 4.0, 4.0 / 4.0, 0.0 / 4.0),
                    Point(4.0 / 4.0, 4.0 / 4.0, 0.0 / 4.0), Point(0.0 / 4.0, 0.0 / 4.0, 1.0 / 4.0),
                    Point(1.0 / 4.0, 0.0 / 4.0, 1.0 / 4.0), Point(2.0 / 4.0, 0.0 / 4.0, 1.0 / 4.0),
                    Point(3.0 / 4.0, 0.0 / 4.0, 1.0 / 4.0), Point(4.0 / 4.0, 0.0 / 4.0, 1.0 / 4.0),
                    Point(0.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0), Point(1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0),
                    Point(2.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0), Point(3.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0),
                    Point(4.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0), Point(0.0 / 4.0, 2.0 / 4.0, 1.0 / 4.0),
                    Point(1.0 / 4.0, 2.0 / 4.0, 1.0 / 4.0), Point(2.0 / 4.0, 2.0 / 4.0, 1.0 / 4.0),
                    Point(3.0 / 4.0, 2.0 / 4.0, 1.0 / 4.0), Point(4.0 / 4.0, 2.0 / 4.0, 1.0 / 4.0),
                    Point(0.0 / 4.0, 3.0 / 4.0, 1.0 / 4.0), Point(1.0 / 4.0, 3.0 / 4.0, 1.0 / 4.0),
                    Point(2.0 / 4.0, 3.0 / 4.0, 1.0 / 4.0), Point(3.0 / 4.0, 3.0 / 4.0, 1.0 / 4.0),
                    Point(4.0 / 4.0, 3.0 / 4.0, 1.0 / 4.0), Point(0.0 / 4.0, 4.0 / 4.0, 1.0 / 4.0),
                    Point(1.0 / 4.0, 4.0 / 4.0, 1.0 / 4.0), Point(2.0 / 4.0, 4.0 / 4.0, 1.0 / 4.0),
                    Point(3.0 / 4.0, 4.0 / 4.0, 1.0 / 4.0), Point(4.0 / 4.0, 4.0 / 4.0, 1.0 / 4.0),
                    Point(0.0 / 4.0, 0.0 / 4.0, 2.0 / 4.0), Point(1.0 / 4.0, 0.0 / 4.0, 2.0 / 4.0),
                    Point(2.0 / 4.0, 0.0 / 4.0, 2.0 / 4.0), Point(3.0 / 4.0, 0.0 / 4.0, 2.0 / 4.0),
                    Point(4.0 / 4.0, 0.0 / 4.0, 2.0 / 4.0), Point(0.0 / 4.0, 1.0 / 4.0, 2.0 / 4.0),
                    Point(1.0 / 4.0, 1.0 / 4.0, 2.0 / 4.0), Point(2.0 / 4.0, 1.0 / 4.0, 2.0 / 4.0),
                    Point(3.0 / 4.0, 1.0 / 4.0, 2.0 / 4.0), Point(4.0 / 4.0, 1.0 / 4.0, 2.0 / 4.0),
                    Point(0.0 / 4.0, 2.0 / 4.0, 2.0 / 4.0), Point(1.0 / 4.0, 2.0 / 4.0, 2.0 / 4.0),
                    Point(2.0 / 4.0, 2.0 / 4.0, 2.0 / 4.0), Point(3.0 / 4.0, 2.0 / 4.0, 2.0 / 4.0),
                    Point(4.0 / 4.0, 2.0 / 4.0, 2.0 / 4.0), Point(0.0 / 4.0, 3.0 / 4.0, 2.0 / 4.0),
                    Point(1.0 / 4.0, 3.0 / 4.0, 2.0 / 4.0), Point(2.0 / 4.0, 3.0 / 4.0, 2.0 / 4.0),
                    Point(3.0 / 4.0, 3.0 / 4.0, 2.0 / 4.0), Point(4.0 / 4.0, 3.0 / 4.0, 2.0 / 4.0),
                    Point(0.0 / 4.0, 4.0 / 4.0, 2.0 / 4.0), Point(1.0 / 4.0, 4.0 / 4.0, 2.0 / 4.0),
                    Point(2.0 / 4.0, 4.0 / 4.0, 2.0 / 4.0), Point(3.0 / 4.0, 4.0 / 4.0, 2.0 / 4.0),
                    Point(4.0 / 4.0, 4.0 / 4.0, 2.0 / 4.0), Point(0.0 / 4.0, 0.0 / 4.0, 3.0 / 4.0),
                    Point(1.0 / 4.0, 0.0 / 4.0, 3.0 / 4.0), Point(2.0 / 4.0, 0.0 / 4.0, 3.0 / 4.0),
                    Point(3.0 / 4.0, 0.0 / 4.0, 3.0 / 4.0), Point(4.0 / 4.0, 0.0 / 4.0, 3.0 / 4.0),
                    Point(0.0 / 4.0, 1.0 / 4.0, 3.0 / 4.0), Point(1.0 / 4.0, 1.0 / 4.0, 3.0 / 4.0),
                    Point(2.0 / 4.0, 1.0 / 4.0, 3.0 / 4.0), Point(3.0 / 4.0, 1.0 / 4.0, 3.0 / 4.0),
                    Point(4.0 / 4.0, 1.0 / 4.0, 3.0 / 4.0), Point(0.0 / 4.0, 2.0 / 4.0, 3.0 / 4.0),
                    Point(1.0 / 4.0, 2.0 / 4.0, 3.0 / 4.0), Point(2.0 / 4.0, 2.0 / 4.0, 3.0 / 4.0),
                    Point(3.0 / 4.0, 2.0 / 4.0, 3.0 / 4.0), Point(4.0 / 4.0, 2.0 / 4.0, 3.0 / 4.0),
                    Point(0.0 / 4.0, 3.0 / 4.0, 3.0 / 4.0), Point(1.0 / 4.0, 3.0 / 4.0, 3.0 / 4.0),
                    Point(2.0 / 4.0, 3.0 / 4.0, 3.0 / 4.0), Point(3.0 / 4.0, 3.0 / 4.0, 3.0 / 4.0),
                    Point(4.0 / 4.0, 3.0 / 4.0, 3.0 / 4.0), Point(0.0 / 4.0, 4.0 / 4.0, 3.0 / 4.0),
                    Point(1.0 / 4.0, 4.0 / 4.0, 3.0 / 4.0), Point(2.0 / 4.0, 4.0 / 4.0, 3.0 / 4.0),
                    Point(3.0 / 4.0, 4.0 / 4.0, 3.0 / 4.0), Point(4.0 / 4.0, 4.0 / 4.0, 3.0 / 4.0),
                    Point(0.0 / 4.0, 0.0 / 4.0, 4.0 / 4.0), Point(1.0 / 4.0, 0.0 / 4.0, 4.0 / 4.0),
                    Point(2.0 / 4.0, 0.0 / 4.0, 4.0 / 4.0), Point(3.0 / 4.0, 0.0 / 4.0, 4.0 / 4.0),
                    Point(4.0 / 4.0, 0.0 / 4.0, 4.0 / 4.0), Point(0.0 / 4.0, 1.0 / 4.0, 4.0 / 4.0),
                    Point(1.0 / 4.0, 1.0 / 4.0, 4.0 / 4.0), Point(2.0 / 4.0, 1.0 / 4.0, 4.0 / 4.0),
                    Point(3.0 / 4.0, 1.0 / 4.0, 4.0 / 4.0), Point(4.0 / 4.0, 1.0 / 4.0, 4.0 / 4.0),
                    Point(0.0 / 4.0, 2.0 / 4.0, 4.0 / 4.0), Point(1.0 / 4.0, 2.0 / 4.0, 4.0 / 4.0),
                    Point(2.0 / 4.0, 2.0 / 4.0, 4.0 / 4.0), Point(3.0 / 4.0, 2.0 / 4.0, 4.0 / 4.0),
                    Point(4.0 / 4.0, 2.0 / 4.0, 4.0 / 4.0), Point(0.0 / 4.0, 3.0 / 4.0, 4.0 / 4.0),
                    Point(1.0 / 4.0, 3.0 / 4.0, 4.0 / 4.0), Point(2.0 / 4.0, 3.0 / 4.0, 4.0 / 4.0),
                    Point(3.0 / 4.0, 3.0 / 4.0, 4.0 / 4.0), Point(4.0 / 4.0, 3.0 / 4.0, 4.0 / 4.0),
                    Point(0.0 / 4.0, 4.0 / 4.0, 4.0 / 4.0), Point(1.0 / 4.0, 4.0 / 4.0, 4.0 / 4.0),
                    Point(2.0 / 4.0, 4.0 / 4.0, 4.0 / 4.0), Point(3.0 / 4.0, 4.0 / 4.0, 4.0 / 4.0),
                    Point(4.0 / 4.0, 4.0 / 4.0, 4.0 / 4.0)},
                   vector<short>(125, 1),
                   {{0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12,
                     13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24},
                    {0,  1,  2,  3,  4,  25, 26, 27,  28,  29,  50,  51, 52,
                     53, 54, 75, 76, 77, 78, 79, 100, 101, 102, 103, 104},
                    {4,  9,  14, 19, 24, 29, 34, 39,  44,  49,  54,  59, 64,
                     69, 74, 79, 84, 89, 94, 99, 104, 109, 114, 119, 124},
                    {20, 21, 22, 23, 24, 45, 46, 47,  48,  49,  70,  71, 72,
                     73, 74, 95, 96, 97, 98, 99, 120, 121, 122, 123, 124},
                    {0,  5,  10, 15, 20, 25, 30, 35,  40,  45,  50,  55, 60,
                     65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120},
                    {100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
                     113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}}}));

#endif

int main(int argc, char **argv) {
  MppTest mppTest = MppTestBuilder(argc, argv).WithPPM();
  return mppTest.RUN_ALL_MPP_TESTS();
}
