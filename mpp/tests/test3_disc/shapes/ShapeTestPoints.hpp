#ifndef SHAPETESTPOINTS_HPP
#define SHAPETESTPOINTS_HPP

#include "ICell.hpp"

std::vector<Point> ShapeTestPoints(CELLTYPE cellType) {
  switch (cellType) {
  case INTERVAL:
    return {Point(0.25), Point(0.30), Point(0.50), Point(0.70), Point(0.75)};
  case QUADRILATERAL:
    return {Point(0.25, 0.25), Point(0.25, 0.30), Point(0.25, 0.50), Point(0.25, 0.70),
            Point(0.25, 0.75), Point(0.30, 0.25), Point(0.30, 0.30), Point(0.30, 0.50),
            Point(0.30, 0.70), Point(0.30, 0.75), Point(0.50, 0.25), Point(0.50, 0.30),
            Point(0.50, 0.50), Point(0.50, 0.70), Point(0.50, 0.75), Point(0.70, 0.25),
            Point(0.70, 0.30), Point(0.70, 0.50), Point(0.70, 0.70), Point(0.70, 0.75),
            Point(0.75, 0.25), Point(0.75, 0.30), Point(0.75, 0.50), Point(0.75, 0.70),
            Point(0.75, 0.75)};
  case TRIANGLE:
    return {Point(0.25, 0.25), Point(0.25, 0.30), Point(0.25, 0.50), Point(0.25, 0.70),
            Point(0.30, 0.25), Point(0.30, 0.30), Point(0.30, 0.50), Point(0.50, 0.25),
            Point(0.50, 0.30), Point(0.70, 0.25)};
  case HEXAHEDRON:
    return {Point(0.25, 0.25, 0.25), Point(0.25, 0.30, 0.25), Point(0.25, 0.50, 0.25),
            Point(0.25, 0.70, 0.25), Point(0.25, 0.75, 0.25), Point(0.30, 0.25, 0.25),
            Point(0.30, 0.30, 0.25), Point(0.30, 0.50, 0.25), Point(0.30, 0.70, 0.25),
            Point(0.30, 0.75, 0.25), Point(0.50, 0.25, 0.25), Point(0.50, 0.30, 0.25),
            Point(0.50, 0.50, 0.25), Point(0.50, 0.70, 0.25), Point(0.50, 0.75, 0.25),
            Point(0.70, 0.25, 0.25), Point(0.70, 0.30, 0.25), Point(0.70, 0.50, 0.25),
            Point(0.70, 0.70, 0.25), Point(0.70, 0.75, 0.25), Point(0.75, 0.25, 0.25),
            Point(0.75, 0.30, 0.25), Point(0.75, 0.50, 0.25), Point(0.75, 0.70, 0.25),
            Point(0.75, 0.75, 0.25), Point(0.25, 0.25, 0.30), Point(0.25, 0.30, 0.30),
            Point(0.25, 0.50, 0.30), Point(0.25, 0.70, 0.30), Point(0.25, 0.75, 0.30),
            Point(0.30, 0.25, 0.30), Point(0.30, 0.30, 0.30), Point(0.30, 0.50, 0.30),
            Point(0.30, 0.70, 0.30), Point(0.30, 0.75, 0.30), Point(0.50, 0.25, 0.30),
            Point(0.50, 0.30, 0.30), Point(0.50, 0.50, 0.30), Point(0.50, 0.70, 0.30),
            Point(0.50, 0.75, 0.30), Point(0.70, 0.25, 0.30), Point(0.70, 0.30, 0.30),
            Point(0.70, 0.50, 0.30), Point(0.70, 0.70, 0.30), Point(0.70, 0.75, 0.30),
            Point(0.75, 0.25, 0.30), Point(0.75, 0.30, 0.30), Point(0.75, 0.50, 0.30),
            Point(0.75, 0.70, 0.30), Point(0.75, 0.75, 0.30), Point(0.25, 0.25, 0.50),
            Point(0.25, 0.30, 0.50), Point(0.25, 0.50, 0.50), Point(0.25, 0.70, 0.50),
            Point(0.25, 0.75, 0.50), Point(0.30, 0.25, 0.50), Point(0.30, 0.30, 0.50),
            Point(0.30, 0.50, 0.50), Point(0.30, 0.70, 0.50), Point(0.30, 0.75, 0.50),
            Point(0.50, 0.25, 0.50), Point(0.50, 0.30, 0.50), Point(0.50, 0.50, 0.50),
            Point(0.50, 0.70, 0.50), Point(0.50, 0.75, 0.50), Point(0.70, 0.25, 0.50),
            Point(0.70, 0.30, 0.50), Point(0.70, 0.50, 0.50), Point(0.70, 0.70, 0.50),
            Point(0.70, 0.75, 0.50), Point(0.75, 0.25, 0.50), Point(0.75, 0.30, 0.50),
            Point(0.75, 0.50, 0.50), Point(0.75, 0.70, 0.50), Point(0.75, 0.75, 0.50),
            Point(0.25, 0.25, 0.70), Point(0.25, 0.30, 0.70), Point(0.25, 0.50, 0.70),
            Point(0.25, 0.70, 0.70), Point(0.25, 0.75, 0.70), Point(0.30, 0.25, 0.70),
            Point(0.30, 0.30, 0.70), Point(0.30, 0.50, 0.70), Point(0.30, 0.70, 0.70),
            Point(0.30, 0.75, 0.70), Point(0.50, 0.25, 0.70), Point(0.50, 0.30, 0.70),
            Point(0.50, 0.50, 0.70), Point(0.50, 0.70, 0.70), Point(0.50, 0.75, 0.70),
            Point(0.70, 0.25, 0.70), Point(0.70, 0.30, 0.70), Point(0.70, 0.50, 0.70),
            Point(0.70, 0.70, 0.70), Point(0.70, 0.75, 0.70), Point(0.75, 0.25, 0.70),
            Point(0.75, 0.30, 0.70), Point(0.75, 0.50, 0.70), Point(0.75, 0.70, 0.70),
            Point(0.75, 0.75, 0.70), Point(0.25, 0.25, 0.75), Point(0.25, 0.30, 0.75),
            Point(0.25, 0.50, 0.75), Point(0.25, 0.70, 0.75), Point(0.25, 0.75, 0.75),
            Point(0.30, 0.25, 0.75), Point(0.30, 0.30, 0.75), Point(0.30, 0.50, 0.75),
            Point(0.30, 0.70, 0.75), Point(0.30, 0.75, 0.75), Point(0.50, 0.25, 0.75),
            Point(0.50, 0.30, 0.75), Point(0.50, 0.50, 0.75), Point(0.50, 0.70, 0.75),
            Point(0.50, 0.75, 0.75), Point(0.70, 0.25, 0.75), Point(0.70, 0.30, 0.75),
            Point(0.70, 0.50, 0.75), Point(0.70, 0.70, 0.75), Point(0.70, 0.75, 0.75),
            Point(0.75, 0.25, 0.75), Point(0.75, 0.30, 0.75), Point(0.75, 0.50, 0.75),
            Point(0.75, 0.70, 0.75), Point(0.75, 0.75, 0.75)};
  case TETRAHEDRON:
    return {Point(0.25, 0.25, 0.25), Point(0.25, 0.30, 0.25), Point(0.30, 0.25, 0.25),
            Point(0.30, 0.30, 0.25), Point(0.30, 0.50, 0.25), Point(0.25, 0.25, 0.30),
            Point(0.25, 0.30, 0.30), Point(0.30, 0.25, 0.30), Point(0.30, 0.30, 0.30),
            Point(0.50, 0.25, 0.30)};
  default:
    THROW("Celltype not implemented")
  }
}

#endif // SHAPETESTPOINTS_HPP
